Instalación Proyecto Laravel-5.4-Ajax-JQuery-Rimorsoft con Laravel 5.4
  Nueva
  -Se crea el proyecto
    -composer create-project --prefer-dist laravel/laravel Laravel-5.4-Ajax-JQuery "5.4.*"
  Desde Github
    -Se clona el proyecto 
      -git clone https://github.com/MarcoPerVaz/Laravel-5.4-Ajax-JQuery-Rimorsoft.git
    -Se copia el archivo .env.example y se le cambia el nombre por .env
      -Se edita el archivo .env
    -Se usa el comando composer install para instalar las dependencias de php
    -Se usa el comando php artisan key:generate para generar una llave del proyecto
    -Listo
Commit 570e797 - Creación del proyecto
Commit 23105b6 - Configuración de .gitignore
  -Se agrega la carpeta Instrucciones al archivo .gitignore
Vídeo 3 - Commit 9c183c3 - Implementando Auth de Laravel
  -Se usa el comando php artisan make:auth para generar lo necesario para Login y registro de usuarios
    Nota: Lo incluye laravel por defecto al usar el comando php artisan make:auth 
      -Crea un controlador HomeController
      -Crea la carpeta auth en resources/views junto con sus vistas
      -Crea la carpeta layouts junto a su vistas
      -Crea la vista hombre.blade.php
  -Se edita la vista welcome.blade.php
Vídeo 4 - Commit 023912a - Specified key was too long error
  Nota: Se corrige un error al usar MariaDB en sus versiones antiguas
  Nota: Si se usa Laragon no es necesario corregir este problema
    -La versión de laragon usada es Laragon full 4.04.14 190508 php 7.2.11-Win32-VC15-x64[TS]
  -Se crea la Base de Datos del proyecto con el nombre de Laravel-5.4-Ajax-JQuery
  -Se configura el archivo .env
    -DB_DATABASE=Laravel-5.4-Ajax-JQuery
     DB_USERNAME=root
     DB_PASSWORD=
  -Se usa el comando php artisan migrate:install
  -Se usa el comando php artisan migrate:refresh
    Nota: Usando MAMP, XAMPP o WAMPP con versión de MariaDb es cuando se presenta el error  
      -Error: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes
      -Solución: ir a app/Providers y en AppServiceProvider.php
        -Importar el Facade Schema
          -use Illuminate\Support\Facades\Schema;
        -Modificar la función boot 
          public function boot()
            {
                Schema::defaultStringLength(191);
            }
        -Se borran las tablas manualmente del gestor de Base de Datos
        -Se usa el comando php artisan migrate:install
        -Se usa el comando php artisan migrate:refresh
        -Listo.
Vídeo 5 - Commit 140a583 - Database: Migrations, Seeders y Model Factories
  -Se crea el modelo Product junto con su migración
    -Se usa el comando php artisan make:model Product -m
  -Se modifica la migración create_products_table
    -Se agregan 3 campos
      -name de tipo string
      -short de tipo mediumText
      -description de tipo text
  -Se usa el comando php artisan migrate:refresh
  -Se crea un seed usando el comando php artisan make:seeder UsersTableSeeder
    -Se edita el seeder UsersTableSeeder en la función run
    -No olvidar importar el trait
      -use App\User;
  -Se crea un seed usando el comando php artisan make:seeder ProductsTableSeeder
    -Se edita el seeder ProductsTableSeeder en la función run
    -No olvidar importar el trait
      -use App\Product;
  -Se registran los 2 seeder creados en el archivo DatabaseSeeder.php
  -Se modifica el archivo ModelFactory.php para determinar que tipos de datos aleatorios deben llenarse
  -Se usa el comando php artisan migrate:refresh --seed para refrescar y llenar de información usando el seed y el factory
Vídeo 6 - Commit 5ca246c - Listado de productos con paginación
  -Se modifica la función index del controlador HomeController
  -Se modifica la vista home.blade.php
Vídeo 7 - Commit e01b7e9 - Implementación de Ajax con JQuery
  -Se crea la ruta en web.php
    -Route::delete('/eliminar-producto/{id}', 'HomeController@destroyProduct')->name('destroyProduct');
  -Se crea la función destroyProduct en el controlador HomeController
  -Se modifica la vista home.blade.php
  -Se instala Laravel collective usando el comando
    -composer require "laravelcollective/html":"^5.3.0"
    -Agregar el proveedor y los alias en el archivo config/app.php
        -'providers' => [
            // ...
            Collective\Html\HtmlServiceProvider::class,
            // ...
          ],
        - 'aliases' => [
            // ...
              'Form' => Collective\Html\FormFacade::class,
              'Html' => Collective\Html\HtmlFacade::class,
            // ...
          ],
  -Se crea el archivo script.js que guardará el javascript(ajax) que se use
  -Se modifica la vista layouts/app.blade.php para agregar un @yield para el script script.js
Commit a7fd4eb - Modificando .gitignore
  -Se quita la carpeta Instrucciones del archivo .gitignore
Fin